{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red49\green49\blue49;\red77\green77\blue77;\red28\green89\blue175;
\red234\green234\blue234;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}}
\deftab720
\pard\pardeftab720\sa428

\f0\b\fs64 \cf2 Best Practices for Designing a Pragmatic RESTful API\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 Your data model has started to stabilize and you're in a position to create a public API for your web app. You realize it's hard to make significant changes to your API once it's released and want to get as much right as possible up front. Now, the internet has no shortage on opinions on API design. But, since there's no one widely adopted standard that works in all cases, you're left with a bunch of choices: What formats should you accept? How should you authenticate? Should your API be versioned?\
In designing an API for {\field{\*\fldinst{HYPERLINK "http://www.supportfu.com/"}}{\fldrslt \cf4 \ul \ulc4 SupportFu}} (a {\field{\*\fldinst{HYPERLINK "http://www.supportfu.com/zendesk-alternative"}}{\fldrslt \cf4 \ul \ulc4 Zendesk Alternative}}), I've tried to come up with pragmatic answers to these questions. My goal is for the {\field{\*\fldinst{HYPERLINK "http://dev.supportfu.com/api/v1"}}{\fldrslt \cf4 \ul \ulc4 SupportFu API}} to be easy to use, easy to adopt and flexible enough to {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Eating_your_own_dog_food"}}{\fldrslt \cf4 \ul \ulc4 dogfood}} for our own user interfaces.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 TL;DR\
\pard\pardeftab720\sa384

\b0\fs38 \cf4 \ul \ulc4 An API is a user interface for a developer - so put some effort into making it pleasant\cf3 \ulnone \uc0\u8232 \cf4 \ul Use RESTful URLs and actions\cf3 \ulnone \uc0\u8232 \cf4 \ul Use SSL everywhere, no exceptions\cf3 \ulnone \uc0\u8232 \cf4 \ul An API is only as good as its documentation - so have great documentation\cf3 \ulnone \uc0\u8232 \cf4 \ul Version via the URL, not via headers\cf3 \ulnone \uc0\u8232 \cf4 \ul Use query parameters for advanced filtering, sorting & searching\cf3 \ulnone \uc0\u8232 \cf4 \ul Provide a way to limit which fields are returned from the API\cf3 \ulnone \uc0\u8232 \cf4 \ul Return something useful from POST, PATCH & PUT requests\cf3 \ulnone \uc0\u8232 \cf4 \ul HATEOAS isn't practical just yet\cf3 \ulnone \uc0\u8232 \cf4 \ul Use JSON where possible, XML only if you have to\cf3 \ulnone \uc0\u8232 \cf4 \ul You should use camelCase with JSON, but snake_case is 20% easier to read\cf3 \ulnone \uc0\u8232 \cf4 \ul Pretty print by default & ensure gzip is supported\cf3 \ulnone \uc0\u8232 \cf4 \ul Don't use response envelopes by default\cf3 \ulnone \uc0\u8232 \cf4 \ul Consider using JSON for POST, PUT and PATCH request bodies\cf3 \ulnone \uc0\u8232 \cf4 \ul Paginate using Link headers\cf3 \ulnone \uc0\u8232 \cf4 \ul Provide a way to autoload related resource representations\cf3 \ulnone \uc0\u8232 \cf4 \ul Provide a way to override the HTTP method\cf3 \ulnone \uc0\u8232 \cf4 \ul Provide useful response headers for rate limiting\cf3 \ulnone \uc0\u8232 \cf4 \ul Use token based authentication, transported over OAuth2 where delegation is needed\cf3 \ulnone \uc0\u8232 \cf4 \ul Include response headers that facilitate caching\cf3 \ulnone \uc0\u8232 \cf4 \ul Define a consumable error payload\cf3 \ulnone \uc0\u8232 \cf4 \ul Effectively use HTTP Status codes\cf3 \ulnone \uc0\u8232 \u8232 ... or just skip to the bottom and 
\b \cf4 signup for updates
\b0 \cf3 \
\pard\pardeftab720\sa398

\b\fs48 \cf3 Key requirements for the API\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 Many of the API design opinions found on the web are academic discussions revolving around subjective interpretations of fuzzy standards as opposed to what makes sense in the real world. My goal with this post is to describe best practices for a pragmatic API designed for today's web applications. I make no attempt to satisfy a standard if it doesn't feel right. To help guide the decision making process, I've written down some requirements that the API must strive for:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls1\ilvl0\cf3 {\listtext	\'95	}It should use web standards where they 
\i make sense
\i0 \
{\listtext	\'95	}It should be friendly to the developer and be explorable via a browser address bar\
{\listtext	\'95	}It should be simple, intuitive and consistent to make adoption not only easy but pleasant\
{\listtext	\'95	}It should provide enough flexibility to power majority of the {\field{\*\fldinst{HYPERLINK "http://www.supportfu.com/"}}{\fldrslt \cf4 \ul SupportFu}} UI\
{\listtext	\'95	}It should be efficient, while maintaining balance with the other requirements\
\pard\pardeftab720\sa384
\cf3 An API is a developer's UI - just like any UI, it's important to ensure the user's experience is thought out carefully!\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Use RESTful URLs and actions\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 If there's one thing that has gained wide adoption, it's RESTful principles. These were first introduced by {\field{\*\fldinst{HYPERLINK "http://roy.gbiv.com/"}}{\fldrslt \cf4 \ul Roy Felding}} in {\field{\*\fldinst{HYPERLINK "http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm"}}{\fldrslt \cf4 \ul Chapter 5}} of his dissertation on {\field{\*\fldinst{HYPERLINK "http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm"}}{\fldrslt \cf4 \ul network based software architectures}}.\
The key principles of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Representational_state_transfer"}}{\fldrslt \cf4 \ul REST}} involve separating your API into logical resources. These resources are manipulated using HTTP requests where the method (GET, POST, PUT, PATCH, DELETE) has specific meaning.\
\pard\pardeftab720\sa384

\b \cf3 But what can I make a resource?
\b0  Well, these should be {\field{\*\fldinst{HYPERLINK "https://blog.apigee.com/detail/restful_api_design_nouns_are_good_verbs_are_bad"}}{\fldrslt \cf4 \ul nouns (not verbs!)}} that make sense from the perspective of the API consumer. Although your internal models may map neatly to resources, it isn't necessarily a one-to-one mapping. The key here is to not leak irrelevant implementation details out to your API! Some of SupportFu's nouns would be 
\i ticket
\i0 , 
\i user
\i0  and 
\i group
\i0 .\
Once you have your resources defined, you need to identify what actions apply to them and how those would map to your API. RESTful principles provide strategies to handle {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Create,_read,_update_and_delete"}}{\fldrslt \cf4 \ul CRUD}} actions using HTTP methods mapped as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls2\ilvl0
\f1\fs34 \cf3 \cb5 {\listtext	\'95	}GET /tickets
\f0\fs38 \cb1  - Retrieves a list of tickets\
\ls2\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}GET /tickets/12
\f0\fs38 \cb1  - Retrieves a specific ticket\
\ls2\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}POST /tickets
\f0\fs38 \cb1  - Creates a new ticket\
\ls2\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}PUT /tickets/12
\f0\fs38 \cb1  - Updates ticket #12\
\ls2\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}PATCH /tickets/12
\f0\fs38 \cb1  - Partially updates ticket #12\
\ls2\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}DELETE /tickets/12
\f0\fs38 \cb1  - Deletes ticket #12\
\pard\pardeftab720\sa384
\cf3 The great thing about REST is that you're leveraging existing HTTP methods to implement significant functionality on just a single 
\f1\fs34 \cb5 /tickets
\f0\fs38 \cb1  endpoint. There are no method naming conventions to follow and the URL structure is clean & clear. 
\i REST FTW!
\i0 \
\pard\pardeftab720\sa384

\b \cf3 Should the endpoint name be singular or plural?
\b0  The keep-it-simple rule applies here. Although your inner-grammatician will tell you it's wrong to describe a single instance of a resource using a plural, the pragmatic answer is to keep the URL format consistent and always use a plural. Not having to deal with odd pluralization (person/people, goose/geese) makes the life of the API consumer better and is easier for the API provider to implement (as most modern frameworks will natively handle 
\f1\fs34 \cb5 /tickets
\f0\fs38 \cb1  and 
\f1\fs34 \cb5 /tickets/12
\f0\fs38 \cb1  under a common controller).\

\b But how do you deal with relations?
\b0  If a relation can only exist within another resource, RESTful principles provide useful guidance. Let's look at this with an example. A ticket in {\field{\*\fldinst{HYPERLINK "http://www.supportfu.com/"}}{\fldrslt \cf4 \ul SupportFu}} consists of a number of messages. These messages can be logically mapped to the 
\f1\fs34 \cb5 /tickets
\f0\fs38 \cb1  endpoint as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls3\ilvl0
\f1\fs34 \cf3 \cb5 {\listtext	\'95	}GET /tickets/12/messages
\f0\fs38 \cb1  - Retrieves list of messages for ticket #12\
\ls3\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}GET /tickets/12/messages/5
\f0\fs38 \cb1  - Retrieves message #5 for ticket #12\
\ls3\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}POST /tickets/12/messages
\f0\fs38 \cb1  - Creates a new message in ticket #12\
\ls3\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}PUT /tickets/12/messages/5
\f0\fs38 \cb1  - Updates message #5 for ticket #12\
\ls3\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}PATCH /tickets/12/messages/5
\f0\fs38 \cb1  - Partially updates message #5 for ticket #12\
\ls3\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}DELETE /tickets/12/messages/5
\f0\fs38 \cb1  - Deletes message #5 for ticket #12\
\pard\pardeftab720\sa384
\cf3 Alternatively, if a relation can exist independently of the resource, it makes sense to just include an identifier for it within the output representation of the resource. The API consumer would then have to hit the relation's endpoint. However, if the relation is commonly requested alongside the resource, the API could offer functionality to automatically embed the relation's representation and avoid the second hit to the API.\
\pard\pardeftab720\sa384

\b \cf3 What about actions that don't fit into the world of CRUD operations?
\b0 \
This is where things can get fuzzy. There are a number of approaches:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls4\ilvl0\cf3 {\listtext	1.	}Restructure the action to appear like a field of a resource. This works if the action doesn't take parameters. For example an 
\i activate
\i0  action could be mapped to a boolean 
\f1\fs34 \cb5 activated
\f0\fs38 \cb1  field and updated via a PATCH to the resource.\
{\listtext	2.	}Treat it like a sub-resource with RESTful principles. For example, GitHub's API lets you {\field{\*\fldinst{HYPERLINK "http://developer.github.com/v3/gists/#star-a-gist"}}{\fldrslt \cf4 \ul star a gist}} with 
\f1\fs34 \cb5 PUT /gists/:id/star
\f0\fs38 \cb1  and {\field{\*\fldinst{HYPERLINK "http://developer.github.com/v3/gists/#unstar-a-gist"}}{\fldrslt \cf4 \ul unstar}} with 
\f1\fs34 \cb5 DELETE /gists/:id/star
\f0\fs38 \cb1 .\
{\listtext	3.	}Sometimes you really have no way to map the action to a sensible RESTful structure. For example, a multi-resource search doesn't really make sense to be applied to a specific resource's endpoint. In this case, 
\f1\fs34 \cb5 /search
\f0\fs38 \cb1  would make the most sense even though it isn't a resource. This is OK - just do what's right from the perspective of the API consumer and make sure it's documented clearly to avoid confusion.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 SSL everywhere - all the time\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 Always use SSL. No exceptions. Today, your web APIs can get accessed from anywhere there is internet (like libraries, coffee shops, airports among others). Not all of these are secure. Many don't encrypt communications at all, allowing for easy eavesdropping or impersonation if authentication credentials are hijacked.\
Another advantage of always using SSL is that guaranteed encrypted communications simplifies authentication efforts - you can get away with simple access tokens instead of having to sign each API request.\
One thing to watch out for is non-SSL access to API URLs. Do 
\b not
\b0  redirect these to their SSL counterparts. Throw a hard error instead! The last thing you want is for poorly configured clients to send requests to an unencrypted endpoint, just to be silently redirected to the actual encrypted endpoint.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Documentation\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 An API is only as good as its documentation. The docs should be easy to find and publically accessible. Most developers will check out the docs before attempting any integration effort. When the docs are hidden inside a PDF file or require signing in, they're not only difficult to find but also not easy to search.\
\
The docs should show examples of complete request/response cycles. Preferably, the requests should be pastable examples - either links that can be pasted into a browser or curl examples that can be pasted into a terminal. {\field{\*\fldinst{HYPERLINK "http://developer.github.com/v3/gists/#list-gists"}}{\fldrslt \cf4 \ul GitHub}} and {\field{\*\fldinst{HYPERLINK "https://stripe.com/docs/api"}}{\fldrslt \cf4 \ul Stripe}} do a great job with this.\
Once you release a public API, you've committed to not breaking things without notice. The documentation must include any deprecation schedules and details surrounding externally visible API updates. Updates should be delivered via a blog (i.e. a changelog) or a mailing list (preferably both!).\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Versioning\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 Always version your API. Versioning helps you iterate faster and prevents invalid requests from hitting updated endpoints. It also helps smooth over any major API version transitions as you can continue to offer old API versions for a period of time.\
There are mixed opinions around whether an {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/389169/best-practices-for-api-versioning"}}{\fldrslt \cf4 \ul API version should be included in the URL or in a header}}. Academically speaking, it should probably be in a header. However, the version needs to be in the URL to ensure browser explorability of the resources across versions (remember the API requirements specified at the top of this post?).\
I'm a big fan of the {\field{\*\fldinst{HYPERLINK "https://stripe.com/docs/api#versioning"}}{\fldrslt \cf4 \ul approach that Stripe has taken to API versioning}} - the URL has a major version number (v1), but the API has date based sub-versions which can be chosen using a custom HTTP request header. In this case, the major version provides structural stability of the API as a whole while the sub-versions accounts for smaller changes (field deprecations, endpoint changes, etc).\
An API is never going to be completely stable. Change is inevitable. What's important is how that change is managed. Well documented and announced multi-month deprecation schedules can be an acceptable practice for many APIs. It comes down to what is reasonable given the industry and possible consumers of the API.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Result filtering, sorting & searching\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 It's best to keep the base resource URLs as lean as possible. Complex result filters, sorting requirements and advanced searching (when restricted to a single type of resource) can all be easily implemented as query parameters on top of the base URL. Let's look at these in more detail:\
\pard\pardeftab720\sa384

\b \cf3 Filtering
\b0 : Use a unique query parameter for each field that implements filtering. For example, when requesting a list of tickets from the 
\f1\fs34 \cb5 /tickets
\f0\fs38 \cb1  endpoint, you may want to limit these to only those in the open state. This could be accomplished with a request like 
\f1\fs34 \cb5 GET /tickets?state=open
\f0\fs38 \cb1 . Here, 
\f1\fs34 \cb5 state
\f0\fs38 \cb1  is a query parameter that implements a filter.\

\b Sorting
\b0 : Similar to filtering, a generic parameter 
\f1\fs34 \cb5 sort
\f0\fs38 \cb1  can be used to describe sorting rules. Accommodate complex sorting requirements by letting the sort parameter take in list of comma separated fields, each with a possible unary negative to imply descending sort order. Let's look at some examples:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls5\ilvl0
\f1\fs34 \cf3 \cb5 {\listtext	\'95	}GET /tickets?sort=-priority
\f0\fs38 \cb1  - Retrieves a list of tickets in descending order of priority\
\ls5\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}GET /tickets?sort=-priority,created_at
\f0\fs38 \cb1  - Retrieves a list of tickets in descending order of priority. Within a specific priority, older tickets are ordered first\
\pard\pardeftab720\sa384

\b \cf3 Searching
\b0 : Sometimes basic filters aren't enough and you need the power of full text search. Perhaps you're already using {\field{\*\fldinst{HYPERLINK "http://www.elasticsearch.org/"}}{\fldrslt \cf4 \ul ElasticSearch}} or another {\field{\*\fldinst{HYPERLINK "http://lucene.apache.org/"}}{\fldrslt \cf4 \ul Lucene}} based search technology. When full text search is used as a mechanism of retrieving resource instances for a specific type of resource, it can be exposed on the API as a query parameter on the resource's endpoint. Let's say 
\f1\fs34 \cb5 q
\f0\fs38 \cb1 . Search queries should be passed straight to the search engine and API output should be in the same format as a normal list result.\
Combining these together, we can build queries like:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls6\ilvl0
\f1\fs34 \cf3 \cb5 {\listtext	\'95	}GET /tickets?sort=-updated_at
\f0\fs38 \cb1  - Retrieve recently updated tickets\
\ls6\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}GET /tickets?state=closed&sort=-updated_at
\f0\fs38 \cb1  - Retrieve recently closed tickets\
\ls6\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}GET /tickets?q=return&state=open&sort=-priority,created_at
\f0\fs38 \cb1  - Retrieve the highest priority open tickets mentioning the word 'return'\
\pard\pardeftab720\sa384

\b \cf3 Aliases for common queries
\b0 \
To make the API experience more pleasant for the average consumer, consider packaging up sets of conditions into easily accessible RESTful paths. For example, the recently closed tickets query above could be packaged up as 
\f1\fs34 \cb5 GET /tickets/recently_closed
\f0\fs38 \cb1 \
\pard\pardeftab720\sa398

\b\fs48 \cf3 Limiting which fields are returned by the API\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 The API consumer doesn't always need the full representation of a resource. The ability select and chose returned fields goes a long way in letting the API consumer minimize network traffic and speed up their own usage of the API.\
Use a 
\f1\fs34 \cb5 fields
\f0\fs38 \cb1  query parameter that takes a comma separated list of fields to include. For example, the following request would retrieve just enough information to display a sorted listing of open tickets:\
\pard\pardeftab720\sa384

\f1\fs34 \cf3 \cb5 GET /tickets?fields=id,subject,customer_name,updated_at&state=open&sort=-updated_at
\f0\fs38 \cb1 \
\pard\pardeftab720\sa398

\b\fs48 \cf3 Updates & creation should return a resource representation\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 A PUT, POST or PATCH call may make modifications to fields of the underlying resource that weren't part of the provided parameters (for example: created_at or updated_at timestamps). To prevent an API consumer from having to hit the API again for an updated representation, have the API return the updated (or created) representation as part of the response.\
In case of a POST that resulted in a creation, use a {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5"}}{\fldrslt \cf4 \ul HTTP 201 status code}} and include a {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30"}}{\fldrslt \cf4 \ul Location header}} that points to the URL of the new resource.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Should you HATEOAS?\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 There are a lot of mixed opinions as to whether the API consumer should create links or whether links should be provided to the API. RESTful design principles specify {\field{\*\fldinst{HYPERLINK "https://blog.apigee.com/detail/hateoas_101_introduction_to_a_rest_api_style_video_slides"}}{\fldrslt \cf4 \ul HATEOAS}} which roughly states that interaction with an endpoint should be defined within metadata that comes with the output representation and not based on out-of-band information.\
Although the web generally works on HATEOAS type principles (where we go to a website's front page and follow links based on what we see on the page), I don't think we're ready for HATEOAS on APIs just yet. When browsing a website, decisions on what links will be clicked are made at run time. However, with an API, decisions as to what requests will be sent are made when the API integration code is written, not at run time. Could the decisions be deferred to run time? Sure, however, there isn't much to gain going down that route as code would still not be able to handle significant API changes without breaking. That said, I think HATEOAS is promising but not ready for prime time just yet. Some more effort has to be put in to define standards and tooling around these principles for its potential to be fully realized.\
For now, it's best to assume the user has access to the documentation & include resource identifiers in the output representation which the API consumer will use when crafting links. There are a couple of advantages of sticking to identifiers - data flowing over the network is minimized and the data stored by API consumers is also minimized (as they are storing small identifiers as opposed to URLs that contain identifiers).\
Also, given this post advocates version numbers in the URL, it makes more sense in the long term for the API consumer to store resource identifiers as opposed to URLs. After all, the identifier is stable across versions but the URL representing it is not!\
\pard\pardeftab720\sa398

\b\fs48 \cf3 JSON only responses\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 It's time to leave XML behind in APIs. It's verbose, it's hard to parse, it's hard to read, its data model isn't compatible with how most programming languages model data and its extendibility advantages are irrelevant when your output representation's primary needs are serialization from an internal representation.\
I'm not going to put much effort into explaining the above breathful as it looks like others ({\field{\*\fldinst{HYPERLINK "http://apiblog.youtube.com/2012/12/the-simpler-yet-more-powerful-new.html"}}{\fldrslt \cf4 \ul YouTube}}, {\field{\*\fldinst{HYPERLINK "https://dev.twitter.com/docs/api/1.1/overview#JSON_support_only"}}{\fldrslt \cf4 \ul Twitter}} & {\field{\*\fldinst{HYPERLINK "http://developers.blog.box.com/2012/12/14/v2_api/"}}{\fldrslt \cf4 \ul Box}}) have already started the XML exodus.\
I'll just leave you the following Google Trends chart ({\field{\*\fldinst{HYPERLINK "http://www.google.com/trends/explore?q=xml+api#q=xml%20api%2C%20json%20api&cmpt=q"}}{\fldrslt \cf4 \ul XML API vs JSON API}}) as food for thought:\
\pard\pardeftab720\sa384\qc

\f2\fs24 \cf0 {\*\shppict {\pict {\*\nisusfilename 201305-xml-vs-json-api} \picw817 \pich237 \picwgoal12255 \pichgoal3555 \pngblip }}
\f0\fs38 \cf3 \
\pard\pardeftab720\sa384
\cf3 However, if your customer base consists of a large number of enterprise customers, you may find yourself having to support XML anyway. If you must do this, you'll find yourself with a new question:\
\
\pard\pardeftab720\sa384

\b \cf3 Should the media type change based on Accept headers or based on the URL?
\b0  To ensure browser explorability, it should be in the URL. The most sensible option here would be to append a 
\f1\fs34 \cb5 .json
\f0\fs38 \cb1  or 
\f1\fs34 \cb5 .xml
\f0\fs38 \cb1  extension to the endpoint URL.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 snake_case vs camelCase for field names\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 If you're using JSON (
\i JavaScript
\i0  Object Notation) as your primary representation format, the "right" thing to do is to follow JavaScript naming conventions - and that means camelCase for field names! If you then go the route of building client libraries in various languages, it's best to use idiomatic naming conventions in them - camelCase for C# & Java, snake_case for python & ruby.\
Food for thought: I've always felt that {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Snake_case"}}{\fldrslt \cf4 \ul snake_case}} is easier to read than JavaScript's convention of {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/CamelCase"}}{\fldrslt \cf4 \ul camelCase}}. I just didn't have any evidence to back up my gut feelings, until now. Based on an {\field{\*\fldinst{HYPERLINK "http://ieeexplore.ieee.org/xpl/articleDetails.jsp?tp=&arnumber=5521745"}}{\fldrslt \cf4 \ul eye tracking study on camelCase and snake_case}} ({\field{\*\fldinst{HYPERLINK "http://www.cs.kent.edu/~jmaletic/papers/ICPC2010-CamelCaseUnderScoreClouds.pdf"}}{\fldrslt \cf4 \ul PDF}}) from 2010, 
\b snake_case is 20% easier to read than camelCase
\b0 ! That impact on readability would affect API explorability and examples in documentation.\
Many popular JSON APIs use snake_case. I suspect this is due to serialization libraries following naming conventions of the underlying language they are using. Perhaps we need to have JSON serialization libraries handle naming convention transformations.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Pretty print by default & ensure gzip is supported\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 An API that provides white-space compressed output isn't very fun to look at from a browser. Although some sort of query parameter (like 
\f1\fs34 \cb5 ?pretty=true
\f0\fs38 \cb1 ) could be provided to enable pretty printing, an API that pretty prints by default is much more approachable. The cost of the extra data transfer is negligible, especially when you compare to the cost of not implementing gzip.\
Consider some use cases: What if an API consumer is debugging and has their code print out data it received from the API - It will be readable by default. Or if the consumer grabbed the URL their code was generating and hit it directly from the browser - it will be readable by default. These are small things. Small things that make an API pleasant to use!\
\pard\pardeftab720\sa384

\b \cf3 But what about all the extra data transfer?
\b0 \
Let's look at this with a real world example. I've pulled some {\field{\*\fldinst{HYPERLINK "https://api.github.com/users/veesahni"}}{\fldrslt \cf4 \ul data from GitHub's API}}, which uses pretty print by default. I'll also be doing some gzip comparisons:\
\pard\pardeftab720

\f1\fs28 \cf3 \cb5 $ curl https://api.github.com/users/veesahni > with-whitespace.txt\
$ ruby -r json -e 'puts JSON JSON.parse(STDIN.read)' < with-whitespace.txt > without-whitespace.txt\
$ gzip -c with-whitespace.txt > with-whitespace.txt.gz\
$ gzip -c without-whitespace.txt > without-whitespace.txt.gz\
\pard\pardeftab720\sa384

\f0\fs38 \cf3 \cb1 The output files have the following sizes:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls7\ilvl0
\f1\fs34 \cf3 \cb5 {\listtext	\'95	}without-whitespace.txt
\f0\fs38 \cb1  - 1252 bytes\
\ls7\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}with-whitespace.txt
\f0\fs38 \cb1  - 1369 bytes\
\ls7\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}without-whitespace.txt.gz
\f0\fs38 \cb1  - 496 bytes\
\ls7\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}with-whitespace.txt.gz
\f0\fs38 \cb1  - 509 bytes\
\pard\pardeftab720\sa384
\cf3 In this example, the whitespace increased the output size by 8.5% when gzip is not in play and 2.6% when gzip is in play. On the other hand, the act of 
\b gzipping in itself provided over 60% in bandwidth savings
\b0 . Since the cost of pretty printing is relatively small, it's best to pretty print by default and ensure gzip compression is supported!\
To further hammer in this point, Twitter found that there was an {\field{\*\fldinst{HYPERLINK "https://dev.twitter.com/blog/announcing-gzip-compression-streaming-apis"}}{\fldrslt \cf4 \ul 80% savings (in some cases)}} when enabling gzip compression on their {\field{\*\fldinst{HYPERLINK "https://dev.twitter.com/docs/streaming-apis"}}{\fldrslt \cf4 \ul Streaming API}}. Stack Exchange went as far as to {\field{\*\fldinst{HYPERLINK "https://api.stackexchange.com/docs/compression"}}{\fldrslt \cf4 \ul never return a response that's not compressed}}!\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Don't use an envelope by default, but make it possible when needed\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 Many APIs wrap their responses in envelopes like this:\
\pard\pardeftab720

\f1\fs28 \cf3 \cb5 \{\
  "data" : \{\
    "id" : 123,\
    "name" : "John"\
  \}\
\}\
\pard\pardeftab720\sa384

\f0\fs38 \cf3 \cb1 There are a couple of justifications for doing this - it makes it easy to include additional metadata or pagination information, some REST clients don't allow easy access to HTTP headers & {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/JSONP"}}{\fldrslt \cf4 \ul JSONP}} requests have no access to HTTP headers. However, with standards that are being rapidly adopted like {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/cors/"}}{\fldrslt \cf4 \ul CORS}} and the {\field{\*\fldinst{HYPERLINK "http://tools.ietf.org/html/rfc5988#page-6"}}{\fldrslt \cf4 \ul Link header from RFC 5988}}, enveloping is starting to become unnecessary.\
We can future proof the API by staying envelope free by default and enveloping only in exceptional cases.\
\pard\pardeftab720\sa384

\b \cf3 How should an envelope be used in the exceptional cases?
\b0 \
There are 2 situations where an envelope is really needed - if the API needs to support cross domain requests over JSONP or if the client is incapable of working with HTTP headers.\
JSONP requests come with an additional query parameter (usually named 
\f1\fs34 \cb5 callback
\f0\fs38 \cb1  or 
\f1\fs34 \cb5 jsonp
\f0\fs38 \cb1 ) representing the name of the callback function. If this parameter is present, the API should switch to a full envelope mode where it always responds with a 200 HTTP status code and passes the real status code in the JSON payload. Any additional HTTP headers that would have been passed alongside the response should be mapped to JSON fields, like so:\
\pard\pardeftab720

\f1\fs28 \cf3 \cb5 callback_function(\{\
  status_code: 200,\
  next_page: "https://..",\
  response: \{\
    ... actual JSON response body ... \
  \}\
\})\
\pard\pardeftab720\sa384

\f0\fs38 \cf3 \cb1 Similarly, to support limited HTTP clients, allow for a special query parameter 
\f1\fs34 \cb5 ?envelope=true
\f0\fs38 \cb1  that would trigger full enveloping (without the JSONP callback function).\
\pard\pardeftab720\sa398

\b\fs48 \cf3 JSON encoded POST, PUT & PATCH bodies\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 If you're following the approach in this post, then you've embraced JSON for all API output. Let's consider JSON for API input.\
Many APIs use URL encoding in their API request bodies. URL encoding is exactly what it sounds like - request bodies where key value pairs are encoded using the same conventions as one would use to encode data in URL query parameters. This is simple, widely supported and gets the job done.\
However, URL encoding has a few issues that make it problematic. It has no concept of data types. This forces the API to parse integers and booleans out of strings. Furthermore, it has no real concept of hierarchical structure. Although there are some conventions that can build some structure out of key value pairs (like appending [ ] to a key to represent an array), this is no comparison to the native hierarchical structure of JSON.\
If the API is simple, URL encoding may suffice. However, complex APIs should stick to JSON for their API input. Either way, pick one and be consistent throughout the API.\
An API that accepts JSON encoded POST, PUT & PATCH requests should also require the 
\f1\fs34 \cb5 Content-Type
\f0\fs38 \cb1  header be set to 
\f1\fs34 \cb5 application/json
\f0\fs38 \cb1  or throw a 415 Unsupported Media Type HTTP status code.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Pagination\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 Envelope loving APIs typically include pagination data in the envelope itself. And I don't blame them - until recently, there weren't many better options. The right way to include pagination details today is using the {\field{\*\fldinst{HYPERLINK "http://tools.ietf.org/html/rfc5988#page-6"}}{\fldrslt \cf4 \ul Link header introduced by RFC 5988}}.\
An API that uses the Link header can return a set of ready-made links so the API consumer doesn't have to construct links themselves. This is especially important when pagination is {\field{\*\fldinst{HYPERLINK "https://developers.facebook.com/docs/reference/api/pagination/"}}{\fldrslt \cf4 \ul cursor based}}. Here is an example of a Link header used properly, grabbed from {\field{\*\fldinst{HYPERLINK "http://developer.github.com/v3/#pagination"}}{\fldrslt \cf4 \ul GitHub}}'s documentation:\
\pard\pardeftab720

\f1\fs28 \cf3 \cb5 Link: <https://api.github.com/user/repos?page=3&per_page=100>; rel="next", <https://api.github.com/user/repos?page=50&per_page=100>; rel="last"\
\pard\pardeftab720\sa384

\f0\fs38 \cf3 \cb1 But this isn't a complete solution as many APIs do like to return the additional pagination information, like a count of the total number of available results. An API that requires sending a count can use a custom HTTP header like 
\f1\fs34 \cb5 X-Total-Count
\f0\fs38 \cb1 .\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Auto loading related resource representations\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 There are many cases where an API consumer needs to load data related to (or referenced) from the resource being requested. Rather than requiring the consumer to hit the API repeatedly for this information, there would be a significant efficiency gain from allowing related data to be returned and loaded alongside the original resource on demand.\
However, as this does {\field{\*\fldinst{HYPERLINK "http://idbentley.com/blog/2013/03/14/should-restful-apis-include-relationships/"}}{\fldrslt \cf4 \ul go against some RESTful principles}}, we can minimize our deviation by only doing so based on an 
\f1\fs34 \cb5 embed
\f0\fs38 \cb1  (or 
\f1\fs34 \cb5 expand
\f0\fs38 \cb1 ) query parameter.\
In this case, 
\f1\fs34 \cb5 embed
\f0\fs38 \cb1  would be a comma separated list of fields to be embedded. Dot-notation could be used to refer to sub-fields. For example:\
\pard\pardeftab720\sa384

\f1\fs34 \cf3 \cb5 GET /tickets/12?embed=customer.name,assigned_user
\f0\fs38 \cb1 \
This would return a ticket with additional details embedded, like:\
\pard\pardeftab720

\f1\fs28 \cf3 \cb5 \{\
  "id" : 12,\
  "subject" : "I have a question!",\
  "summary" : "Hi, ....",\
  "customer" : \{\
    "name" : "Bob"\
  \},\
  assigned_user: \{\
   "id" : 42,\
   "name" : "Jim",\
  \}\
\}\
\pard\pardeftab720\sa384

\f0\fs38 \cf3 \cb1 Of course, ability to implement something like this really depends on internal complexity. This kind of embedding can easily result in an {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue"}}{\fldrslt \cf4 \ul N+1 select issue}}.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Overriding the HTTP method\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 Some HTTP clients can only work with simple GET and POST requests. To increase accessibility to these limited clients, the API needs a way to override the HTTP method. Although there aren't any hard standards here, the popular convention is to accept a request header 
\f1\fs34 \cb5 X-HTTP-Method-Override
\f0\fs38 \cb1  with a string value containing one of PUT, PATCH or DELETE.\
Note that the override header should 
\b only
\b0  be accepted on POST requests. GET requests should never {\field{\*\fldinst{HYPERLINK "http://programmers.stackexchange.com/questions/188860/why-shouldnt-a-get-request-change-data-on-the-server"}}{\fldrslt \cf4 \ul change data on the server}}!\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Rate limiting\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 To prevent abuse, it is standard practice to add some sort of rate limiting to an API. {\field{\*\fldinst{HYPERLINK "http://tools.ietf.org/html/rfc6585"}}{\fldrslt \cf4 \ul RFC 6585}} introduced a HTTP status code {\field{\*\fldinst{HYPERLINK "http://tools.ietf.org/html/rfc6585#section-4"}}{\fldrslt \cf4 \ul 429 Too Many Requests}} to accommodate this.\
However, it can be very useful to notify the consumer of their limits before they actually hit it. This is an area that currently lacks standards but has a number of {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/16022624/examples-of-http-api-rate-limiting-http-response-headers"}}{\fldrslt \cf4 \ul popular conventions using HTTP response headers}}.\
At a minimum, include the following headers (using Twitter's {\field{\*\fldinst{HYPERLINK "https://dev.twitter.com/docs/rate-limiting/1.1"}}{\fldrslt \cf4 \ul naming conventions}} as headers typically don't have mid-word capitalization):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls8\ilvl0
\f1\fs34 \cf3 \cb5 {\listtext	\'95	}X-Rate-Limit-Limit
\f0\fs38 \cb1  - The number of allowed requests in the current period\
\ls8\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}X-Rate-Limit-Remaining
\f0\fs38 \cb1  - The number of remaining requests in the current period\
\ls8\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}X-Rate-Limit-Reset
\f0\fs38 \cb1  - The number of seconds left in the current period\
\pard\pardeftab720\sa384

\b \cf3 Why is number of seconds left being used instead of a time stamp for X-Rate-Limit-Reset?
\b0 \
A timestamp contains all sorts of useful but unnecessary information like the date and possibly the time-zone. An API consumer really just wants to when they can send the request again & the number of seconds answers this question with minimal additional processing on their end. It also avoids issues related to {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Clock_skew"}}{\fldrslt \cf4 \ul clock skew}}.\
Some APIs use a UNIX timestamp (seconds since epoch) for X-Rate-Limit-Reset. Don't do this!\

\b Why is it bad practice to use a UNIX timestamp for X-Rate-Limit-Reset?
\b0 \
The {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616.txt"}}{\fldrslt \cf4 \ul HTTP spec}} already {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3"}}{\fldrslt \cf4 \ul specifies}} using {\field{\*\fldinst{HYPERLINK "http://www.ietf.org/rfc/rfc1123.txt"}}{\fldrslt \cf4 \ul RFC 1123 date formats}} (currently being used in {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.18"}}{\fldrslt \cf4 \ul Date}}, {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25"}}{\fldrslt \cf4 \ul If-Modified-Since}} & {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29"}}{\fldrslt \cf4 \ul Last-Modified}} HTTP headers). If we were to specify a new HTTP header that takes a timestamp of some sort, it should follow RFC 1123 conventions instead of using UNIX timestamps.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Authentication\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 A RESTful API should be stateless. This means that request authentication should not depend on cookies or sessions. Instead, each request should come with some sort authentication credentials.\
By always using SSL, the authentication credentials can be simplified to a randomly generated access token that is delivered in the user name field of HTTP Basic Auth. The great thing about this is that it's completely browser explorable - the browser will just popup a prompt asking for credentials if it receives a 
\f1\fs34 \cb5 401 Unauthorized
\f0\fs38 \cb1  status code from the server.\
However, this token-over-basic-auth method of authentication is only acceptable in cases where it's practical to have the user copy a token from an administration interface to the API consumer environment. In cases where this isn't possible, {\field{\*\fldinst{HYPERLINK "http://oauth.net/2/"}}{\fldrslt \cf4 \ul OAuth 2}} should be used to provide secure token transfer to a third party. OAuth 2 uses {\field{\*\fldinst{HYPERLINK "http://tools.ietf.org/html/rfc6750"}}{\fldrslt \cf4 \ul Bearer tokens}} & also depends on SSL for its underlying transport encryption.\
An API that needs to support JSONP will need a third method of authentication, as JSONP requests cannot send HTTP Basic Auth credentials or Bearer tokens. In this case, a special query parameter 
\f1\fs34 \cb5 access_token
\f0\fs38 \cb1  can be used. Note: there is an inherent security issue in using a query parameter for the token as most web servers store query parameters in server logs.\
For what it's worth, all three methods above are just ways to transport the token across the API boundary. The actual underlying token itself could be identical.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Caching\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 HTTP provides a built-in caching framework! All you have to do is include some additional outbound response headers and do a little validation when you receive some inbound request headers.\
There are 2 approaches: {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/HTTP_ETag"}}{\fldrslt \cf4 \ul ETag}} and {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29"}}{\fldrslt \cf4 \ul Last-Modified}}\
\pard\pardeftab720\sa384

\b \cf3 ETag
\b0 : When generating a request, include a HTTP header ETag containing a hash or checksum of the representation. This value should change whenever the output representation changes. Now, if an inbound HTTP requests contains a 
\f1\fs34 \cb5 If-None-Match
\f0\fs38 \cb1  header with a matching ETag value, the API should return a 
\f1\fs34 \cb5 304 Not Modified
\f0\fs38 \cb1  status code instead of the output representation of the resource.\

\b Last-Modified
\b0 : This basically works like to ETag, except that it uses timestamps. The response header 
\f1\fs34 \cb5 Last-Modified
\f0\fs38 \cb1  contains a timestamp in {\field{\*\fldinst{HYPERLINK "http://www.ietf.org/rfc/rfc1123.txt"}}{\fldrslt \cf4 \ul RFC 1123}} format which is validated against 
\f1\fs34 \cb5 If-Modified-Since
\f0\fs38 \cb1 . Note that the HTTP spec has had {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3"}}{\fldrslt \cf4 \ul 3 different acceptable date formats}} and the server should be prepared to accept any one of them.\
\pard\pardeftab720\sa398

\b\fs48 \cf3 Errors\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 Just like an HTML error page shows a useful error message to a visitor, an API should provide a useful error message in a known consumable format. The representation of an error should be no different than the representation of any resource, just with its own set of fields.\
The API should always return sensible HTTP status codes. API errors typically break down into 2 types: 400 series status codes for client issues & 500 series status codes for server issues. At a minimum, the API should standardize that all 400 series errors come with consumable JSON error representation. If possible (i.e. if load balancers & reverse proxies can create custom error bodies), this should extend to 500 series status codes.\
A JSON error body should provide a few things for the developer - a useful error message, a unique error code (that can be looked up for more details in the docs) and possibly a detailed description. JSON output representation for something like this would look like:\
\pard\pardeftab720

\f1\fs28 \cf3 \cb5 \{\
  "code" : 1234,\
  "message" : "Something bad happened :(",\
  "description" : "More details about the error here"\
\}\
\pard\pardeftab720\sa384

\f0\fs38 \cf3 \cb1 Validation errors for PUT, PATCH and POST requests will need a field breakdown. This is best modeled by using a fixed top-level error code for validation failures and providing the detailed errors in an additional 
\f1\fs34 \cb5 errors
\f0\fs38 \cb1  field, like so:\
\pard\pardeftab720

\f1\fs28 \cf3 \cb5 \{\
  "code" : 1024,\
  "message" : "Validation Failed",\
  "errors" : [\
    \{\
      "code" : 5432,\
      "field" : "first_name",\
      "message" : "First name cannot have fancy characters"\
    \},\
    \{\
       "code" : 5622,\
       "field" : "password",\
       "message" : "Password cannot be blank"\
    \}\
  ]\
\}\
\pard\pardeftab720\sa398

\f0\b\fs48 \cf3 \cb1 HTTP status codes\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 HTTP defines a bunch of {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/List_of_HTTP_status_codes"}}{\fldrslt \cf4 \ul meaningful status codes}} that can be returned from your API. These can be leveraged to help the API consumers route their responses accordingly. I've curated a short list of the ones that you definitely should be using:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200
\ls9\ilvl0
\f1\fs34 \cf3 \cb5 {\listtext	\'95	}200 OK
\f0\fs38 \cb1  - Response to a successful GET, PUT, PATCH or DELETE. Can also be used for a POST that doesn't result in a creation.\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}201 Created
\f0\fs38 \cb1  - Response to a POST that results in a creation. Should be combined with a {\field{\*\fldinst{HYPERLINK "http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30"}}{\fldrslt \cf4 \ul Location header}} pointing to the location of the new resource\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}204 No Content
\f0\fs38 \cb1  - Response to a successful request that won't be returning a body (like a DELETE request)\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}304 Not Modified
\f0\fs38 \cb1  - Used when HTTP caching headers are in play\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}400 Bad Request
\f0\fs38 \cb1  - The request is malformed, such as if the body does not parse\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}401 Unauthorized
\f0\fs38 \cb1  - When no or invalid authentication details are provided. Also useful to trigger an auth popup if the API is used from a browser\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}403 Forbidden
\f0\fs38 \cb1  - When authentication succeeded but authenticated user doesn't have access to the resource\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}404 Not Found
\f0\fs38 \cb1  - When a non-existent resource is requested\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}405 Method Not Allowed
\f0\fs38 \cb1  - When an HTTP method is being requested that isn't allowed for the authenticated user\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}410 Gone
\f0\fs38 \cb1  - Indicates that the resource at this end point is no longer available. Useful as a blanket response for old API versions\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}415 Unsupported Media Type
\f0\fs38 \cb1  - If incorrect content type was provided as part of the request\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}422 Unprocessable Entity
\f0\fs38 \cb1  - Used for validation errors\
\ls9\ilvl0
\f1\fs34 \cb5 {\listtext	\'95	}429 Too Many Requests
\f0\fs38 \cb1  - When a request is rejected due to rate limiting\
\pard\pardeftab720\sa398

\b\fs48 \cf3 In Summary\
\pard\pardeftab720\sa384

\b0\fs38 \cf3 An API is a user interface for developers. Put the effort in to ensure it's not just functional but pleasant to use.}