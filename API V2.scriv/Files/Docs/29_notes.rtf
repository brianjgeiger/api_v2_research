{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"}}{\fldrslt 
\f0\fs24 \cf0 http://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling}}
\f0\fs24 \
\
let us consider an example where a customer in banking domain wants to change her address. There are two ways this can be done:\
\
In the first approach, a CRUD API built around the \'93Customer\'94 resource can be used to directly update the address of the customer. That is, to update an existing customer\'92s address, a HTTP PUT request can be made to \'93Customer\'94 resource (or \'93Address\'94 resource if it exists).\
\
An alternate approach that addresses the CRUD concern is to design the API around the resources that are based on the business processes and domain events. For example, to update an existing bank customer\'92s address, a POST request can be made to \'93ChangeOfAddress\'94 resource.\
\
\
This business process can be called either EnrollCustomer, or CustomerEnrollment. In this case, the term CustomerEnrollment sounds better because it is noun-ish. It also reads better: \'93CustomerEnrollment number 2543 for customer xxxx\'94. It also has the additional benefit of maintaining business relevant, independently query-able and evolving state.\
\
Perhaps this can be a rule of thumb: Does the process need state of its own? Will the business be asking questions about this process such as - what is the status of the process? \'a0if it failed, why? Who initiated it and from where? how many of them happened? What are the most common reasons for failure of the process, and at which step? How long did it take on average, min, max? For most non-trivial processes, businesses want answers to these questions. And such a process should be modeled as a resource in its own right.\
\
The idea is that we no longer PUT the "new" state of an entity, instead we make our mutations be first class citizen nouns (rather than verbs), and POST them. This also plays very nicely with\'a0event sourcing\'a0- events are a canonical example of first class citizen nouns and help us get out of the mindset of thinking of them as "mutators" - they're domain relevant events, not just a change to the state of some object.\
\
REST without PUT has a side-benefit of separating command and query interfaces (CQRS) and forces consumers to allow for eventual consistency. We POST command entities to one endpoint (the "C" of CQRS) and GET a model entity from another endpoint (the "Q"). To expand this further, think of an API that manages Customers. When we want to view the current state of a Customer, we GET the Customer. When we want to change a Customer, we actually POST a \'93CustomerChange\'94 resource. When we view the customer via the GET, this may just be a projection of the current state of the Customer built up from the series of change events related to the Customer. Or it could be that we have the \'93CustomerChange\'94 resources that actually mutate the state of Customer in DB, in which case the GET is a direct DB retrieval. In the latter case, we may be destroying some data (associated with the change events) and potentially losing the intent behind the change (depending whether we choose to persist the event data or not). So REST without PUT doesn't mean we *will* get CQRS automatically, but does make it very easy if we want to.}